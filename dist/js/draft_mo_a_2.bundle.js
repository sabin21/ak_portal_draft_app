(()=>{"use strict";var e,n={587:(e,n,i)=>{var t=i(429);function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function r(e,n){for(var i=0;i<n.length;i++){var t=n[i];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,(void 0,r=function(e,n){if("object"!==o(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var t=i.call(e,"string");if("object"!==o(t))return t;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(t.key),"symbol"===o(r)?r:String(r)),t)}var r}var s=["#4100AA","#00AEEF","#4100AA","#00AAAA","#005BAA"];s=s.map((function(e){return new t.Ilk(e)})),console.log(s),new(function(){function e(n){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.scene=new t.xsS,this.container=n.dom,this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.renderer=new t.CP7,this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.width,this.height),this.renderer.setClearColor(15658734,1),this.renderer.LinearEncoding=t.KI_,this.container.appendChild(this.renderer.domElement),this.camera=new t.cPb(70,window.innerWidth/window.innerHeight,.001,1e3),this.camera.position.set(0,0,.2),this.time=0,this.isPlaying=!0,this.addObjects(),this.resize(),this.render(),this.setupResize()}var n,i;return n=e,(i=[{key:"settings",value:function(){this.settings={progress:0},this.gui=new dat.GUI,this.gui.add(this.settings,"progress",0,1,.01)}},{key:"setupResize",value:function(){window.addEventListener("resize",this.resize.bind(this))}},{key:"resize",value:function(){this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.renderer.setSize(this.width,this.height),this.camera.aspect=this.width/this.height,this.camera.updateProjectionMatrix()}},{key:"addObjects",value:function(){this.material=new t.jyz({extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},side:t.ehD,uniforms:{time:{value:0},uColor:{value:s},resolution:{value:new t.Ltg}},vertexShader:"#define GLSLIFY 1\nuniform float time;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vColor;\nuniform vec2 pixels;\nuniform vec3 uColor[5];\nfloat PI = 3.141592653589793238;\n\n//\tSimplex 3D Noise \n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){ \n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //  x0 = x0 - 0. + 0.0 * C \n  vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n  vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n  vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n// Permutations\n  i = mod(i, 289.0 ); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients\n// ( N*N points uniformly over a square, mapped onto an octahedron.)\n  float n_ = 1.0/7.0; // N=7\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n}\n\nvoid main() {\n\n  vec2 noiseCoord = uv*vec2(3., 4.);\n\n  float tilt = -0.4*uv.y;\n\n  float incline = uv.x*0.25;\n\n  float offset = 0.5*incline*mix(-0.25,0.25,uv.y);\n\n  float noise = snoise(vec3(noiseCoord.x + time*3., noiseCoord.y, time * 10.));\n\n  noise = max(0., noise);\n\n  vec3 pos = vec3(position.x, position.y,position.z + noise * 0.3 + tilt + incline + offset);\n\n  vColor = uColor[4];\n  \n  for(int i=0; i<4; i++){\n    float noiseFlow = 5. + float(i)*0.3;\n    float noiseSpeed = 5. + float(i)*0.3;\n\n    float noiseSeed = 1. + float(i)*10.;\n    vec2 noiseFreq = vec2(1.2, 0.8);\n\n    float noiseFloor = 0.1;\n    float noiseCeil = 0.6 + float(i)*0.07;\n\n    float noise = smoothstep(noiseFloor, noiseCeil, \n        snoise(vec3(\n          noiseCoord.x*noiseFreq.x + time*noiseFlow, \n          noiseCoord.y, \n          time * noiseSpeed + noiseSeed\n        )\n      )\n    );\n    vColor = mix(vColor, uColor[i], noise);\n  }\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( pos, 1.0 );\n}",fragmentShader:"#define GLSLIFY 1\nuniform float time;\nuniform float progress;\nuniform sampler2D texture1;\nuniform vec4 resolution;\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vColor;\nfloat PI = 3.141592653589793238;\nvoid main()\t{\n\t// vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n\tgl_FragColor = vec4(vUv,0.0,1.);\n  gl_FragColor = vec4(vColor,1.);\n}"}),this.geometry=new t._12(2,2,300,300),this.plane=new t.Kj0(this.geometry,this.material),this.scene.add(this.plane)}},{key:"stop",value:function(){this.isPlaying=!1}},{key:"play",value:function(){this.isPlaying||(this.render(),this.isPlaying=!0)}},{key:"render",value:function(){this.isPlaying&&(this.time+=2e-4,this.material.uniforms.time.value=this.time,requestAnimationFrame(this.render.bind(this)),this.renderer.render(this.scene,this.camera))}}])&&r(n.prototype,i),Object.defineProperty(n,"prototype",{writable:!1}),e}())({dom:document.getElementById("hero-canvas")})}},i={};function t(e){var o=i[e];if(void 0!==o)return o.exports;var r=i[e]={exports:{}};return n[e](r,r.exports,t),r.exports}t.m=n,e=[],t.O=(n,i,o,r)=>{if(!i){var s=1/0;for(l=0;l<e.length;l++){for(var[i,o,r]=e[l],a=!0,v=0;v<i.length;v++)(!1&r||s>=r)&&Object.keys(t.O).every((e=>t.O[e](i[v])))?i.splice(v--,1):(a=!1,r<s&&(s=r));if(a){e.splice(l--,1);var c=o();void 0!==c&&(n=c)}}return n}r=r||0;for(var l=e.length;l>0&&e[l-1][2]>r;l--)e[l]=e[l-1];e[l]=[i,o,r]},t.d=(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.j=363,(()=>{var e={363:0};t.O.j=n=>0===e[n];var n=(n,i)=>{var o,r,[s,a,v]=i,c=0;if(s.some((n=>0!==e[n]))){for(o in a)t.o(a,o)&&(t.m[o]=a[o]);if(v)var l=v(t)}for(n&&n(i);c<s.length;c++)r=s[c],t.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return t.O(l)},i=self.webpackChunkhsad_draft_app_02=self.webpackChunkhsad_draft_app_02||[];i.forEach(n.bind(null,0)),i.push=n.bind(null,i.push.bind(i))})();var o=t.O(void 0,[216],(()=>t(587)));o=t.O(o)})();